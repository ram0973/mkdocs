{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"JPA-and-Hibernate-Cascade-Types/","text":"JPA and Hibernate Cascade Types One To One @Entity @Table(name=\"posts\") public class Post { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToOne(mappedBy = \"post\", cascade = CascadeType.ALL, orphanRemoval = true) private PostDetails details; public void addDetails(PostDetails details) { this.details = details; details.setPost(this); } public void removeDetails() { if (details != null) { details.setPost(null); } this.details = null; } } @Entity @Table(name=\"post_details\") public class PostDetails { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToOne @PrimaryKeyJoinColumn private Post post; } Many To One @Entity @Table(name=\"items\") public class Items { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @ManyToOne @JoinColumn(name=\"cart_id\", nullable=false) private Cart cart; public Items() {} } One To Many @Entity @Table(name=\"cart\") public class Cart { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToMany(mappedBy = \"cart\", cascade = CascadeType.ALL, orphanRemoval = true) private Set<Items> items; } Many To Many @Entity @Table(name=\"students\") class Student { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @ManyToMany(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE}) @JoinTable(name = \"course_like\", joinColumns = @JoinColumn(name = \"student_id\"), inverseJoinColumns = @JoinColumn(name = \"course_id\")) Set<Course> likedCourses; } @Entity @Table(name=\"courses\") class Course { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @ManyToMany(mappedBy = \"likedCourses\", cascade = {CascadeType.PERSIST, CascadeType.MERGE}) Set<Student> likes; }","title":"JPA and Hibernate Cascade Types"},{"location":"JPA-and-Hibernate-Cascade-Types/#jpa-and-hibernate-cascade-types","text":"One To One @Entity @Table(name=\"posts\") public class Post { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToOne(mappedBy = \"post\", cascade = CascadeType.ALL, orphanRemoval = true) private PostDetails details; public void addDetails(PostDetails details) { this.details = details; details.setPost(this); } public void removeDetails() { if (details != null) { details.setPost(null); } this.details = null; } } @Entity @Table(name=\"post_details\") public class PostDetails { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToOne @PrimaryKeyJoinColumn private Post post; } Many To One @Entity @Table(name=\"items\") public class Items { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @ManyToOne @JoinColumn(name=\"cart_id\", nullable=false) private Cart cart; public Items() {} } One To Many @Entity @Table(name=\"cart\") public class Cart { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToMany(mappedBy = \"cart\", cascade = CascadeType.ALL, orphanRemoval = true) private Set<Items> items; } Many To Many @Entity @Table(name=\"students\") class Student { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @ManyToMany(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE}) @JoinTable(name = \"course_like\", joinColumns = @JoinColumn(name = \"student_id\"), inverseJoinColumns = @JoinColumn(name = \"course_id\")) Set<Course> likedCourses; } @Entity @Table(name=\"courses\") class Course { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @ManyToMany(mappedBy = \"likedCourses\", cascade = {CascadeType.PERSIST, CascadeType.MERGE}) Set<Student> likes; }","title":"JPA and Hibernate Cascade Types"},{"location":"git-goodies/","text":"Git goodies # Setup email and user name $ git config --global user.email \"ram0973@gmail.com\" $ git config --global user.name \"ram0973\" # Create a new repository on the command line git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin https://github.com/ram0973/project.git git push -u origin main # Push an existing repository from the command line git remote add origin https://github.com/ram0973/project.git git branch -M main git push -u origin main","title":"Git goodies"},{"location":"git-goodies/#git-goodies","text":"# Setup email and user name $ git config --global user.email \"ram0973@gmail.com\" $ git config --global user.name \"ram0973\" # Create a new repository on the command line git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin https://github.com/ram0973/project.git git push -u origin main # Push an existing repository from the command line git remote add origin https://github.com/ram0973/project.git git branch -M main git push -u origin main","title":"Git goodies"},{"location":"ssh-setup/","text":"Setup ssh client in Ubuntu # Create key if needed or skip and copy your key to ~/.ssh/id_rsa, if existed $ ssh-keygen -t rsa -b 4096 -C \"your_mail@your_domain\" # Ssh-agent: add next two lines to ~/.bashrc $ eval \"$(ssh-agent -s)\" $ ssh-add ~/.ssh/id_rsa $ source ~/.bashrc # Go to github and paste contents of ~/.id_rsa.pub there https://github.com/settings/ssh/new # Test key on github Check out the [](linux/ssh-goodies) section for further information. $ ssh -T git@github.com # Change passphrase if desired: $ ssh-keygen -p Write in ~/.ssh/config, for example: Host me Hostname myhost Port 2222 User username IdentityFile ~/.ssh/id_rsa # Protect ssh files $ chmod -R o-rwx,g-rwx ~/.ssh/* # Copy public key to server $ ssh-copy-id -i ~/.ssh/id_rsa.pub me","title":"Ssh setup"},{"location":"ssh-setup/#setup-ssh-client-in-ubuntu","text":"# Create key if needed or skip and copy your key to ~/.ssh/id_rsa, if existed $ ssh-keygen -t rsa -b 4096 -C \"your_mail@your_domain\" # Ssh-agent: add next two lines to ~/.bashrc $ eval \"$(ssh-agent -s)\" $ ssh-add ~/.ssh/id_rsa $ source ~/.bashrc # Go to github and paste contents of ~/.id_rsa.pub there https://github.com/settings/ssh/new # Test key on github Check out the [](linux/ssh-goodies) section for further information. $ ssh -T git@github.com # Change passphrase if desired: $ ssh-keygen -p Write in ~/.ssh/config, for example: Host me Hostname myhost Port 2222 User username IdentityFile ~/.ssh/id_rsa # Protect ssh files $ chmod -R o-rwx,g-rwx ~/.ssh/* # Copy public key to server $ ssh-copy-id -i ~/.ssh/id_rsa.pub me","title":"Setup ssh client in Ubuntu"}]}